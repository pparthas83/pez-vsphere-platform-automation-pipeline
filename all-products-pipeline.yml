resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
# - name: daily
#   type: time
#   source:
#     interval: 24h

# - name: config
#   type: git
#   source:
#     uri: ((configuration.uri))
#     branch: master

- name: config-private
  type: git
  source:
    uri: ((configuration_private.uri))
    branch: master
    private_key: ((configuration_private.key))
    username: ((configuration_private.username))
    password: ((configuration_private.password))

- name: pcf-healthwatch-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-healthwatch-(.*).pivotal

- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: ops-manager-vsphere-(.*)-build.*\.ova

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: cf-(.*).pivotal

- name: rabbit-mq-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-(.*).pivotal 

- name: pcf-metrics-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-(.*).pivotal 

- name: spring-cloud-services-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p_spring-cloud-services-(.*).pivotal

- name: mysql-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-(.*).pivotal 

- name: pas-windows-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-windows-(.*).build.1.output.pivotal 

- name: nsxt-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: VMware-NSX-T-(.*).pivotalz   

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(250.25)-vsphere.*\.tgz

- name: rabbit-mq-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(97.82)-vsphere.*\.tgz

- name: spring-cloud-services-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(250.29)-vsphere.*\.tgz

- name: mysql-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(170.48)-vsphere.*\.tgz

- name: pcf-healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(170.48)-vsphere.*\.tgz

- name: pcf-metrics-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(170.48)-vsphere.*\.tgz

- name: pas-windows-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: bosh-stemcell-(1803.8)-vsphere.*\.tgz

# - name: platform-automation-pivnet
#   type: pivnet
#   source:
#     api_token: ((pivnet_token))
#     product_slug: platform-automation
#     product_version: 1\.(.*) # pin to major version 1
#     sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

# - name: one-time-trigger
#   type: time
#   source:
#     interval: 999999h

# jobs:
# - name: fetch-healthwatch
#   plan:
#   - aggregate:
#     - get: daily
#       trigger: true
#     - get: platform-automation-image
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: config
#   - task: download-healthwatch-product-and-stemcell
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/download-product.yml
#     params:
#       CONFIG_FILE: download-product-configs/healthwatch.yml
#     output_mapping: {downloaded-stemcell: healthwatch-stemcell}
#   - aggregate:
#     - put: healthwatch-product
#       params:
#         file: downloaded-product/*.pivotal
#     - put: healthwatch-stemcell
#       params:
#         file: healthwatch-stemcell/*.tgz

jobs:
- name: install-opsman
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: opsman-product
        - get: config-private
    # - task: credhub-interpolate
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/credhub-interpolate.yml
    #   params:
    #     CREDHUB_CLIENT: ((credhub-client))
    #     CREDHUB_SECRET: ((credhub-secret))
    #     CREDHUB_SERVER: ((credhub-server))
    #     CREDHUB_CA_CERT: ((credhub-ca-cert))
    #     PREFIX: '/pipeline/nonprod'
    #     INTERPOLATION_PATH: ((foundation))/vars/vars
    #   input_mapping:
    #     files: variable
    #   output_mapping:
    #     interpolated-files: variable
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: opsman-product
        state: config-private
        config: config-private
        #vars: config-private
      params:
        #VARS_FILES: config/vars/vars-private.yml
        OPSMAN_CONFIG_FILE: config/opsman.yml
    #   on_success:
    #     do:
    #       - task: make-commit
    #         image: platform-automation-image
    #         file: platform-automation-tasks/tasks/make-git-commit.yml
    #         input_mapping:
    #           repository: config-private
    #           file-source: generated-state
    #         output_mapping:
    #           repository-commit: configuration-commit
    #         params:
    #           FILE_SOURCE_PATH: state.yml
    #           FILE_DESTINATION_PATH: state/state.yml
    #           GIT_AUTHOR_EMAIL: "platform-automation-pipeline-bot@example.com"
    #           GIT_AUTHOR_NAME: "Platform Automation Bot"
    #           COMMIT_MESSAGE: 'Update state file'
    #       - put: config-private
    #         params:
    #           repository: configuration-commit
    #           merge: true
    # - task: extract-staged-director-config-template
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/staged-director-config.yml
    #   input_mapping:
    #     env: config-private
    #   params:
    #     ENV_FILE: env/ops-man-env.yml
    # - task: make-commit
    #   image: platform-automation-image
    #   file: platform-automation-tasks/tasks/make-git-commit.yml
    #   input_mapping:
    #     repository: config-private
    #     file-source: generated-config
    #   output_mapping:
    #     repository-commit: configuration-commit
    #   params:
    #     FILE_SOURCE_PATH: director.yml
    #     FILE_DESTINATION_PATH: generated-config/director.yml
    #     GIT_AUTHOR_EMAIL: "platform-automation-pipeline-bot@example.com"
    #     GIT_AUTHOR_NAME: "Platform Automation Bot"
    #     COMMIT_MESSAGE: "Add or update product config: director"
    # - put: config-private
    #   params:
    #     repository: configuration-commit
    #     merge: true

- name: configure-director
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [install-opsman]
      trigger: true
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-opsman]
    - get: config-private
      passed: [install-opsman]
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config-private
      env: config-private
      # vars: interpolated-files
    params:
      ENV_FILE: env/ops-man-env.yml
      DIRECTOR_CONFIG_FILE: config/director.yml
      # VARS_FILES: vars/((foundation))/vars/director.yml

- name: apply-changes-director
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      trigger: true
      passed: [configure-director]
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [configure-director]
    - get: config-private
      passed: [configure-director]
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: install-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: pas-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: config-private
    params:
      ENV_FILE: env/pas-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  # - task: staged-config
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/staged-config.yml
  #   input_mapping:
  #     env: interpolated-files
  #   params:
  #     PRODUCT_NAME: ((products.pas.product_name))
  #     ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
  #     SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    # on_success:
    #   do:
    #     - task: make-commit
    #       image: platform-automation-image
    #       file: platform-automation-tasks/tasks/make-git-commit.yml
    #       input_mapping:
    #         repository: config-private
    #         file-source: config-private
    #       output_mapping:
    #         repository-commit: configuration-commit
    #       params:
    #         FILE_SOURCE_PATH: pas.yml
    #         FILE_DESTINATION_PATH: generated-config/pas.yml
    #         GIT_AUTHOR_EMAIL: "platform-automation-pipeline-bot@example.com"
    #         GIT_AUTHOR_NAME: "Platform Automation Bot"
    #         COMMIT_MESSAGE: 'Update PAS file'
    #     - put: config-private
    #       params:
    #         repository: configuration-commit
    #         merge: true

- name: upload-stemcell-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-pas]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-pas]
    - get: config-private
      passed: [install-pas]
    - get: pas-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: pas-stemcell
    params:
      ENV_FILE: env/pas-env.yml


# - name: fetch-opsman
#   plan:
#   - aggregate:
#     - get: platform-automation-image
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: config-private
#   - task: download-opsman-product
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/download-product.yml
#     input_mapping:
#       config : config-private
#     params:
#       CONFIG_FILE: download-private-product-variables/download-config.yml
#   - aggregate:
#     - put: opsman-product
#       params:
#         file: downloaded-product/*

# - name: fetch-pas
#   plan:
#   - aggregate:
#     - get: platform-automation-image
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       passed: [fetch-platform-automation]
#       params:
#         unpack: true
#     - get: config-private
#   - task: download-pas-product-and-stemcell
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/download-product.yml
#     input_mapping:
#       config : config-private
#     params:
#       CONFIG_FILE: download-private-product-variables/pas.yml
#   - aggregate:
#     - put: pas-product
#       params:
#         file: downloaded-product/*.pivotal

# - name: fetch-platform-automation
#   # We use the pivnet resource to bootstrap the pipeline,
#   # and because this product is part of the pipeline, not the foundation
#   plan:
#   - get: platform-automation-pivnet
#     trigger: true
#   - aggregate:
#     - put: platform-automation-tasks
#       params:
#         file: platform-automation-pivnet/*tasks*.zip
#     - put: platform-automation-image
#       params:
#         file: platform-automation-pivnet/*image*.tgz

# - name: generate-product-config-pas
#   serial: true
#   plan:
#   - aggregate:
#     - get: platform-automation-image
#       params: {unpack: true}
#       passed: [install-pas]
#       trigger: true
#     - get: platform-automation-tasks
#       params: {unpack: true}
#     - get: config-private
#   # - task: credhub-interpolate
#   #   <<: *credhub-interpolate
#   - task: staged-config
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: config-private
#     params:
#       PRODUCT_NAME: cf
#       ENV_FILE: env/pas-env.yml
#       # SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
#     on_success:
#       do:
#         - task: make-commit
#           image: platform-automation-image
#           file: platform-automation-tasks/tasks/make-git-commit.yml
#           input_mapping:
#             repository: config-private
#             file-source: generated-config
#           output_mapping:
#             repository-commit: configuration-commit
#           params:
#             FILE_SOURCE_PATH: cf.yml
#             FILE_DESTINATION_PATH: generated-config/pas.yml
#             GIT_AUTHOR_EMAIL: "platform-automation-pipeline-bot@example.com"
#             GIT_AUTHOR_NAME: "Platform Automation Bot"
#             COMMIT_MESSAGE: "Add or update product config: PAS"
#         - put: config-private
#           params:
#             repository: configuration-commit
#             merge: true

- name: configure-product-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pas]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/pas.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/pas-env.yml

# - name: apply-pas-changes
#   serial: true
#   plan:
#   - aggregate:
#     - get: platform-automation-image
#       trigger: true
#       passed: [configure-product-pas]
#       params: {unpack: true}
#     - get: platform-automation-tasks
#       params: {unpack: true}
#     - get: config-private
#   - task: apply-pas-changes
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/apply-changes.yml
#     input_mapping:
#       env: config-private
#     params:
#       ENV_FILE: env/pas-env.yml

- name: install-Rabbit-MQ
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: rabbit-mq-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: rabbit-mq-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: rabbit-mq-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-rabbit-mq
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-Rabbit-MQ]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-Rabbit-MQ]
    - get: config-private
      passed: [install-Rabbit-MQ]
    - get: rabbit-mq-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: rabbit-mq-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-rabbit-mq
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-rabbit-mq]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-rabbit-mq
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/rabbitmq.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

# - name: apply-rabbit-mq-changes
#   serial: true
#   plan:
#   - aggregate:
#     - get: platform-automation-image
#       trigger: true
#       passed: [configure-product-rabbit-mq]
#       params: {unpack: true}
#     - get: platform-automation-tasks
#       params: {unpack: true}
#     - get: config-private
#   - task: apply-rabbit-mq-changes
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/apply-changes.yml
#     input_mapping:
#       env: config-private
#     params:
#       ENV_FILE: env/ops-man-env.yml

- name: install-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: spring-cloud-services-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: spring-cloud-services-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: spring-cloud-services-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-spring-cloud-services]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-spring-cloud-services]
    - get: config-private
      passed: [install-spring-cloud-services]
    - get: spring-cloud-services-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: spring-cloud-services-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-spring-cloud-services]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-spring-cloud-services
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/scs.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

- name: install-mysql
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: mysql-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: mysql-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: mysql-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-mysql
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-mysql]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-mysql]
    - get: config-private
      passed: [install-mysql]
    - get: mysql-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: mysql-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-mysql
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-mysql]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-mysql
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/mysql.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

- name: install-pcf-metrics
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: pcf-metrics-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pcf-metrics-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pcf-metrics-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-pcf-metrics
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-pcf-metrics]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-pcf-metrics]
    - get: config-private
      passed: [install-pcf-metrics]
    - get: pcf-metrics-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: pcf-metrics-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-pcf-metrics
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pcf-metrics]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-pcf-metrics
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/pcf-metrics.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml


- name: install-pcf-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: pcf-healthwatch-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pcf-healthwatch-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pcf-healthwatch-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-pcf-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-pcf-healthwatch]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-pcf-healthwatch]
    - get: config-private
      passed: [install-pcf-healthwatch]
    - get: pcf-healthwatch-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: pcf-healthwatch-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-pcf-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pcf-healthwatch]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-pcf-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/pcf-healthwatch.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

- name: install-pas-windows
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: pas-windows-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-windows-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-windows-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: upload-stemcell-pas-windows
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-pas-windows]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [install-pas-windows]
    - get: config-private
      passed: [install-pas-windows]
    - get: pas-windows-stemcell
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: config-private
      stemcell: pas-windows-stemcell
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-product-pas-windows
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pas-windows]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-product-pas-windows
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/pas-windows.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

- name: install-nsxt
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
      passed: [apply-changes-director]
    - get: platform-automation-tasks
      params: {unpack: true}
      passed: [apply-changes-director]
    - get: nsxt-product
    - get: config-private
      passed: [apply-changes-director]
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: nsxt-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: nsxt-product
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml

- name: configure-nsxt
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [install-nsxt]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  # - task: credhub-interpolate
  #   <<: *credhub-interpolate
  - task: configure-nsxt
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config-private
      env: config-private
      #vars: config-private
    params:
      CONFIG_FILE: config/nsxt.yml
      #VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: env/ops-man-env.yml

- name: apply-all-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      trigger: true
      passed: [configure-product-pas, configure-product-rabbit-mq, configure-product-mysql, configure-product-pcf-metrics, configure-product-pcf-healthwatch, configure-product-spring-cloud-services, configure-product-pas-windows, configure-nsxt]
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: config-private
  - task: apply-all-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: config-private
    params:
      ENV_FILE: env/ops-man-env.yml